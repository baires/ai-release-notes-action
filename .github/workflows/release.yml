name: Release

on:
  push:
    branches: [main]
    paths:
      - 'package.json'
      - 'src/**'
      - 'action.yml'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0, v1.1.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        type: choice
        default: 'patch'
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build action
        run: npm run build

      - name: Commit dist files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if [ -n "$(git status --porcelain dist/)" ]; then
            git add dist/
            git commit -m "build: compile distribution files for release"
            echo "✅ Distribution files committed"
          else
            echo "ℹ️  No changes to distribution files"
          fi

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger - use provided version
            VERSION="${{ github.event.inputs.version }}"
            # Ensure version starts with 'v'
            if [[ ! $VERSION == v* ]]; then
              VERSION="v${VERSION}"
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "release_type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          else
            # Automatic trigger - determine version from package.json changes
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            NEW_VERSION="v${CURRENT_VERSION}"
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "release_type=auto" >> $GITHUB_OUTPUT
          fi

      - name: Check if tag exists
        id: check_tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag $VERSION already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag $VERSION does not exist, proceeding with release"
          fi

      - name: Update version references in documentation
        id: update_versions
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          MAJOR_VERSION=$(echo $VERSION | sed 's/\(v[0-9]*\).*/\1/')
          
          echo "Updating version references to $VERSION (major: $MAJOR_VERSION)"
          
          # Update example workflows
          find examples/ -name "*.yml" -type f -exec sed -i.bak \
            "s|baires/ai-release-notes-action@v[0-9]*\.[0-9]*\.[0-9]*|baires/ai-release-notes-action@$VERSION|g" {} \;
          
          find examples/ -name "*.yml" -type f -exec sed -i.bak \
            "s|baires/ai-release-notes-action@v[0-9]*|baires/ai-release-notes-action@$MAJOR_VERSION|g" {} \;
          
          # Update README.md
          sed -i.bak "s|baires/ai-release-notes-action@v[0-9]*\.[0-9]*\.[0-9]*|baires/ai-release-notes-action@$VERSION|g" README.md
          sed -i.bak "s|baires/ai-release-notes-action@v[0-9]*|baires/ai-release-notes-action@$MAJOR_VERSION|g" README.md
          
          # Update RELEASES.md
          if [ -f "RELEASES.md" ]; then
            sed -i.bak "s|baires/ai-release-notes-action@v[0-9]*\.[0-9]*\.[0-9]*|baires/ai-release-notes-action@$VERSION|g" RELEASES.md
            sed -i.bak "s|baires/ai-release-notes-action@v[0-9]*|baires/ai-release-notes-action@$MAJOR_VERSION|g" RELEASES.md
          fi
          
          # Update source code references (GitHub URLs in footer, etc.)
          find src/ -name "*.js" -type f -exec sed -i.bak \
            "s|github.com/baires/ai-release-notes-action|github.com/baires/ai-release-notes-action|g" {} \;
          
          # Clean up backup files
          find . -name "*.bak" -delete
          
          # Check if any files were changed
          if [ -n "$(git status --porcelain)" ]; then
            echo "version_updated=true" >> $GITHUB_OUTPUT
            echo "Updated version references in:"
            git status --porcelain
          else
            echo "version_updated=false" >> $GITHUB_OUTPUT
            echo "No version references needed updating"
          fi

      - name: Commit version reference updates
        if: steps.update_versions.outputs.version_updated == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add examples/ README.md RELEASES.md src/
          git commit -m "docs: update version references to $VERSION
          
          Automatically update all documentation and example workflows to reference
          the new release version $VERSION.
          
          This ensures users always see current, working examples in documentation."

      - name: Verify version references updated
        if: steps.update_versions.outputs.version_updated == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          MAJOR_VERSION=$(echo $VERSION | sed 's/\(v[0-9]*\).*/\1/')
          
          echo "🔍 Verifying all version references were updated..."
          
          # Check examples directory
          EXAMPLE_ISSUES=$(find examples/ -name "*.yml" -exec grep -l "baires/ai-release-notes-action@v[0-9]*\.[0-9]*\.[0-9]*" {} \; | grep -v "@$VERSION" || true)
          if [ -n "$EXAMPLE_ISSUES" ]; then
            echo "❌ Found outdated version references in examples:"
            echo "$EXAMPLE_ISSUES"
            exit 1
          fi
          
          # Check for mixed version references (should all be major or specific version)
          ALL_REFS=$(find examples/ README.md RELEASES.md -type f 2>/dev/null -exec grep -o "baires/ai-release-notes-action@v[0-9]*\(\.[0-9]*\.[0-9]*\)\?" {} \; | sort | uniq)
          echo "📋 Found action version references:"
          echo "$ALL_REFS" | sed 's/^/  - /'
          
          # Check GitHub URL references in source code
          SRC_REFS=$(find src/ -name "*.js" -type f 2>/dev/null -exec grep -o "github.com/baires/ai-release-notes-action" {} \; | sort | uniq || echo "")
          if [ -n "$SRC_REFS" ]; then
            echo "📋 Found GitHub URL references in source:"
            echo "$SRC_REFS" | sed 's/^/  - /'
          fi
          
          # Count different version patterns
          SPECIFIC_COUNT=$(echo "$ALL_REFS" | grep -c "@$VERSION" || echo "0")
          MAJOR_COUNT=$(echo "$ALL_REFS" | grep -c "@$MAJOR_VERSION" || echo "0")
          
          echo "✅ Version reference summary:"
          echo "  - Specific version ($VERSION): $SPECIFIC_COUNT"
          echo "  - Major version ($MAJOR_VERSION): $MAJOR_COUNT"
          
          if [ "$SPECIFIC_COUNT" -eq 0 ] && [ "$MAJOR_COUNT" -eq 0 ]; then
            echo "⚠️  No version references found - this might be expected for initial setup"
          else
            echo "✅ Version references successfully updated"
          fi

      - name: Generate release notes
        id: release_notes
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          PREV_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          echo "Generating release notes for $VERSION (previous: $PREV_VERSION)"
          
          # Get commits since last tag
          if [ -n "$PREV_VERSION" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" "$PREV_VERSION..HEAD" --no-merges)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges -10)
          fi
          
          # Generate release notes
          cat > release-notes.md << EOF
          # AI-Powered Release Notes Generator $VERSION
          
          ## What's Changed
          
          $COMMITS
          
          ## Features
          
          - 🤖 **AI-Powered**: Generate intelligent release notes using Gemini API or Vertex AI
          - 📋 **Modular Design**: Enable/disable features as needed (releases, changelogs, Slack)
          - 🎯 **Smart Triggers**: Configurable labels and branch targeting
          - 🔄 **Multi-Environment**: Support for dev, staging, and production deployments
          - 📝 **Changelog Management**: Automatic changelog updates
          - 💬 **Slack Integration**: Rich notifications with mentions
          - 🏷️ **Smart Versioning**: Automatic semantic versioning
          
          ## Usage
          
          \`\`\`yaml
          - uses: baires/ai-release-notes-action@$VERSION
            with:
              gemini_api_key: \${{ secrets.GEMINI_API_KEY }}
              create_release: true
              enable_slack: true
              slack_webhook_url: \${{ secrets.SLACK_WEBHOOK_URL }}
          \`\`\`
          
          ## Documentation
          
          - [Full Documentation](https://github.com/baires/ai-release-notes-action#readme)
          - [Examples](https://github.com/baires/ai-release-notes-action/tree/main/examples)
          - [Marketplace](https://github.com/marketplace/actions/ai-powered-release-notes-generator)
          
          **Full Changelog**: https://github.com/baires/ai-release-notes-action/compare/$PREV_VERSION...$VERSION
          EOF
          
          # Set output for release creation
          echo "notes_file=release-notes.md" >> $GITHUB_OUTPUT

      - name: Push changes to main
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          # Push any commits (dist files, version updates) before tagging
          git push origin main

      - name: Create Git tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "$VERSION" -m "Release $VERSION"

      - name: Push tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          git push origin "$VERSION"

      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: 'AI-Powered Release Notes Generator ${{ steps.version.outputs.version }}'
          body_path: release-notes.md
          draft: false
          prerelease: false

      - name: Update major version tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Extract major version (e.g., v1.2.3 -> v1)
          MAJOR_VERSION=$(echo $VERSION | sed 's/\(v[0-9]*\).*/\1/')
          
          echo "Updating major version tag: $MAJOR_VERSION"
          
          # Delete existing major version tag if it exists
          git tag -d "$MAJOR_VERSION" 2>/dev/null || true
          git push origin ":refs/tags/$MAJOR_VERSION" 2>/dev/null || true
          
          # Create new major version tag
          git tag -a "$MAJOR_VERSION" -m "Major version $MAJOR_VERSION (points to $VERSION)"
          git push origin "$MAJOR_VERSION"

      - name: Publish to Marketplace
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          echo "🎉 Release ${{ steps.version.outputs.version }} has been created!"
          echo "📦 The action is now available at:"
          echo "   - baires/ai-release-notes-action@${{ steps.version.outputs.version }}"
          echo "   - baires/ai-release-notes-action@$(echo ${{ steps.version.outputs.version }} | sed 's/\(v[0-9]*\).*/\1/')"
          echo ""
          echo "🚀 To publish to GitHub Marketplace:"
          echo "1. Go to: https://github.com/baires/ai-release-notes-action/releases"
          echo "2. Edit the release ${{ steps.version.outputs.version }}"
          echo "3. Check 'Publish this Action to the GitHub Marketplace'"
          echo "4. Add marketplace categories and submit"

      - name: Cleanup
        if: always()
        run: |
          rm -f release-notes.md